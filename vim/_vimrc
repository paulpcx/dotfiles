"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Copied from amix the lucky stiff's Ultimate Vim Configuration
"       http://amix.dk/blog/post/19486#The-ultimate-vim-configuration-vimrc
"
" For_more_info: 
" 		http://john2x.com/
" 		http://john2x.com/blog/2011/my-vim-setup/
" 
" Syntax_highlighted:
" 		http://john2x.com/media/uploads/vim/vimrc.html
" Raw_version:
" 		http://john2x.com/media/uploads/vim/vimrc.txt
"
" Last_updated: 
" 		2011-03-31 03:43:02
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" => Pathogen 
""""""""""""""""""""""""""""""
" Must be placed on top to work
call pathogen#runtime_append_all_bundles()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=300

" Enable filetype plugin
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" set linewrapping
set wrap linebreak nolist

" tabs
set tabstop=4
set shiftwidth=4
set noexpandtab


" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <leader>s :w!<cr>

" TODO: Change this when transfering
" Fast editing of the .vimrc
map <leader>ev :e! $VIM/_vimrc<cr>
" When vimrc is edited, reload it
autocmd! bufwritepost vimrc source $VIM/_vimrc

" Timestamp
nmap <F5> a<C-R>=strftime("%Y-%m-%d %I:%M:%S")<CR><Esc>
imap <F5> <C-R>=strftime("%Y-%m-%d %I:%M:%S")<CR>

" Toggle 80 column marker
nnoremap <F2> :call ToggleColorColumn()<CR>

func! ToggleColorColumn()
	if exists("b:colorcolumnon") && b:colorcolumnon
		let b:colorcolumnon = 0
		exec ':set colorcolumn=0'
		echo '80 column marker off'
	else
		let b:colorcolumnon = 1
		exec ':set colorcolumn=80'
		echo '80 column marker on'
	endif	
endfunc

" Press jj to exit insert mode
imap jj <Esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the curors - when moving vertical..

set so=7

set wildmenu "Turn on WiLd menu

set ruler "Always show current position

set cmdheight=2 "The commandbar height

set hid "Change buffer - without saving

" Set backspace config
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set ignorecase "Ignore case when searching

set hlsearch "Highlight search things

set incsearch "Make search act like search in modern browsers

set magic "Set magic on, for regular expressions

set showmatch "Show matching bracets when text indicator is over them
set mat=2 "How many tenths of a second to blink
set cul             "highlight current line

" No sound on errors
set noerrorbells
set novisualbell
set t_vb=
syntax enable "Enable syntax hl

" "smooth scrolling" on spacebar
map <S-Space> <C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y>
map <Space> <C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E>

" set window size
if has("gui_running")
	set columns=84
	set lines=60
endif

" toggle background for solarized colorscheme
call togglebg#map("<F6>")
" highlight 4th space (indentation guide)
" call matchadd('TODO', '\(^\s*\)\@<=\%4v')
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files and backups
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TODO: Change this when transfering
" Set font according to system
set gfn=Consolas:h11

if has("gui_running")
  set guioptions-=T
  set t_Co=256
  set background=dark
  colorscheme molokai
  hi colorcolumn guibg=#444444
  set nu
else
  let g:solarized_termcolors=256
  set background=light
  colorscheme solarized
  set nu
endif

set encoding=utf8
try
    lang en_US
catch
endtry

set ffs=unix,dos,mac "Default file types

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command mode related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart mappings on the command line
cno $h e ~/
cno $d e ~/Desktop/
cno $j e ./
cno $c e <C-\>eCurrentFileDir("e")<cr>

" $q is super useful when browsing on the command line
cno $q <C-\>eDeleteTillSlash()<cr>

" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>

cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" Useful on some European keyboards
map ½ $
imap ½ $
vmap ½ $
cmap ½ $


func! Cwd()
  let cwd = getcwd()
  return "e " . cwd 
endfunc

func! DeleteTillSlash()
  let g:cmd = getcmdline()
  if MySys() == "linux" || MySys() == "mac"
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
  else
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
  endif
  if g:cmd == g:cmd_edited
    if MySys() == "linux" || MySys() == "mac"
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
    else
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
    endif
  endif   
  return g:cmd_edited
endfunc

func! CurrentFileDir(cmd)
  return a:cmd . " " . expand("%:p:h") . "/"
endfunc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart way to move btw. windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close all the buffers
map <leader>ba :1,300 bd!<cr>

" Use the arrows to something usefull
map <right> :bn<cr>
map <left> :bp<cr>

" Tab configuration
map <leader>tn :tabnew %<cr>
map <leader>te :tabedit 
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 

" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""
" Always hide the statusline
set laststatus=2

" Format the statusline
set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c


function! CurDir()
    let curdir = substitute(getcwd(), '/Users/amir/', "~/", "g")
    return curdir
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Pressing ,ss will toggle and untoggle spell checking
map <leader>sc :setlocal spell!<cr>

"Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Omni complete functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

""""""""""""""""""""""""""""""
" => Python section
""""""""""""""""""""""""""""""
au FileType python set nocindent
" folding
au FileType python set foldmethod=indent
let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self

au BufNewFile,BufRead *.jinja set syntax=htmljinja
au BufNewFile,BufRead *.mako set ft=mako

au FileType python inoremap <buffer> $r return 
au FileType python inoremap <buffer> $i import 
au FileType python inoremap <buffer> $p print 
au FileType python inoremap <buffer> $f #--- PH ----------------------------------------------<esc>FP2xi
au FileType python map <buffer> <leader>1 /class 
au FileType python map <buffer> <leader>2 /def 
au FileType python map <buffer> <leader>C ?class 
au FileType python map <buffer> <leader>D ?def 

""""""""""""""""""""""""""""""
" => Processing section
""""""""""""""""""""""""""""""
au FileType processing inoremap {<CR>	{<CR>}<Esc>O
au FileType processing silent noremap ;	<Esc>mcA;<Esc>`c
au FileType processing inoremap (	()<Left>
au FileType processing inoremap ()	()
au FileType processing inoremap [	[]<Left>
au FileType processing inoremap []	[]

let g:processing_dir = "~/Documents/Processing"
function! CreateProcessingProject(projName)
	execute "!mkdir " . g:processing_dir . "/" . a:projName
	execute "!mkdir " . g:processing_dir . "/" . a:projName . "/Data"
	execute "e " . g:processing_dir . "/" . a:projName . "/" . a:projName . ".pde"
	execute "cd %:p:h"
endfunction

""""""""""""""""""""""""""""""
" => Java section
""""""""""""""""""""""""""""""
au FileType java inoremap {<CR>	{<CR>}<Esc>O
au FileType java silent noremap ;	<Esc>mcA;<Esc>`c
let java_comment_strings=1
let java_highlight_java_lang_ids=1
let java_mark_braces_in_parens_as_errors=1
let java_highlight_all=1
let java_highlight_debug=1
let java_ignore_javadoc=1
let java_highlight_java_lang_ids=1
let java_highlight_functions="style"
let java_minlines = 150

""""""""""""""""""""""""""""""
" => Actionscript section
""""""""""""""""""""""""""""""
au BufNewFile,BufRead *.as set ft=actionscript

""""""""""""""""""""""""""""""
" => Plugins
""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""
" => Taglist
""""""""""""""""""""""""""""""
set tags=tags;/     "look for tags
map <F4> :TlistToggle<CR><CR>
" Taglist variables
" Display function name in status bar:
let g:ctags_statusline=1
" Automatically start script
let generate_tags=1
" Displays taglist results in a vertical window:
let Tlist_Use_Horiz_Window=0
" Various Taglist diplay config:
let Tlist_Use_Right_Window = 1
let Tlist_Compact_Format = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_File_Fold_Auto_Close = 1

" TODO: Change this when transfering
" change this to ctags directory
let Tlist_Ctags_Cmd = "/usr/local/Cellar/ctags/5.8/bin/ctags"

""""""""""""""""""""""""""""""
" => NERDTree
""""""""""""""""""""""""""""""
map <F3> :NERDTreeToggle<CR>

""""""""""""""""""""""""""""""
" => MiniBufExpl 
""""""""""""""""""""""""""""""
let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 
let g:miniBufExplModSelTarget = 1

""""""""""""""""""""""""""""""
" => Bclose 
""""""""""""""""""""""""""""""
nnoremap <silent> <Leader>x :Bclose<CR>

